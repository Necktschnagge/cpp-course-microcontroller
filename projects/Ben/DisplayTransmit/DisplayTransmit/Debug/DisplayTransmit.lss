
DisplayTransmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000027c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c0a  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000802  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000491  00000000  00000000  0000180c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000018c  00000000  00000000  00001ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000695  00000000  00000000  00001e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005a4  00000000  00000000  000024c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a65  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a5 30       	cpi	r26, 0x05	; 5
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  9e:	0c 94 3c 01 	jmp	0x278	; 0x278 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9GPIO_Initv>:
}
void send_char_message(const char* value, uint8_t count){
	for(uint8_t n = 0; n < count; ++n){
		send_char(value[n]);
	}
}
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <_Z12read_confirmv>:
  ae:	89 b1       	in	r24, 0x09	; 9
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	08 95       	ret

000000b4 <_Z10set_outputb6Output>:
  b4:	88 23       	and	r24, r24
  b6:	21 f0       	breq	.+8      	; 0xc0 <_Z10set_outputb6Output+0xc>
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	68 2b       	or	r22, r24
  bc:	6b b9       	out	0x0b, r22	; 11
  be:	08 95       	ret
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	60 95       	com	r22
  c4:	68 23       	and	r22, r24
  c6:	6b b9       	out	0x0b, r22	; 11
  c8:	08 95       	ret

000000ca <_Z8send_bitb>:
  ca:	cf 93       	push	r28
  cc:	c8 2f       	mov	r28, r24
  ce:	0e 94 57 00 	call	0xae	; 0xae <_Z12read_confirmv>
  d2:	81 11       	cpse	r24, r1
  d4:	fc cf       	rjmp	.-8      	; 0xce <_Z8send_bitb+0x4>
  d6:	62 e0       	ldi	r22, 0x02	; 2
  d8:	8c 2f       	mov	r24, r28
  da:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
  de:	64 e0       	ldi	r22, 0x04	; 4
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
  e6:	0e 94 57 00 	call	0xae	; 0xae <_Z12read_confirmv>
  ea:	88 23       	and	r24, r24
  ec:	e1 f3       	breq	.-8      	; 0xe6 <_Z8send_bitb+0x1c>
  ee:	64 e0       	ldi	r22, 0x04	; 4
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <_Z9send_saveb>:
  fa:	0e 94 65 00 	call	0xca	; 0xca <_Z8send_bitb>
  fe:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_end>
 102:	8f 5f       	subi	r24, 0xFF	; 255
 104:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_end>
 108:	84 30       	cpi	r24, 0x04	; 4
 10a:	28 f0       	brcs	.+10     	; 0x116 <_Z9send_saveb+0x1c>
 10c:	81 e0       	ldi	r24, 0x01	; 1
 10e:	0e 94 65 00 	call	0xca	; 0xca <_Z8send_bitb>
 112:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 116:	08 95       	ret

00000118 <_Z7connectv>:
 118:	cf 93       	push	r28
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	0e 94 65 00 	call	0xca	; 0xca <_Z8send_bitb>
 120:	c5 e0       	ldi	r28, 0x05	; 5
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 65 00 	call	0xca	; 0xca <_Z8send_bitb>
 128:	c1 50       	subi	r28, 0x01	; 1
 12a:	d9 f7       	brne	.-10     	; 0x122 <_Z7connectv+0xa>
 12c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_end>
 130:	cf 91       	pop	r28
 132:	08 95       	ret

00000134 <_Z8send_intl>:

void send_int(int32_t number){
 134:	8f 92       	push	r8
 136:	9f 92       	push	r9
 138:	af 92       	push	r10
 13a:	bf 92       	push	r11
 13c:	cf 92       	push	r12
 13e:	df 92       	push	r13
 140:	ef 92       	push	r14
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	6b 01       	movw	r12, r22
 14e:	7c 01       	movw	r14, r24
	bool tmp_data = false;
	int16_t	tmp_bit	= 0;
	send_save(0);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
	send_save(1);
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
	int16_t tmp_number = number >> 16;
 15c:	57 01       	movw	r10, r14
 15e:	cf e0       	ldi	r28, 0x0F	; 15
 160:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t n = 0; n < 16; ++n){
		tmp_bit = static_cast < int16_t >(1) << (15-n);
		tmp_data = (tmp_number & tmp_bit);
		send_save(tmp_data);
 162:	01 e0       	ldi	r16, 0x01	; 1
 164:	10 e0       	ldi	r17, 0x00	; 0
 166:	99 24       	eor	r9, r9
 168:	93 94       	inc	r9
 16a:	81 2c       	mov	r8, r1
 16c:	98 01       	movw	r18, r16
 16e:	0c 2e       	mov	r0, r28
 170:	02 c0       	rjmp	.+4      	; 0x176 <_Z8send_intl+0x42>
 172:	22 0f       	add	r18, r18
 174:	33 1f       	adc	r19, r19
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <_Z8send_intl+0x3e>
 17a:	2a 21       	and	r18, r10
 17c:	3b 21       	and	r19, r11
 17e:	89 2d       	mov	r24, r9
 180:	23 2b       	or	r18, r19
 182:	09 f4       	brne	.+2      	; 0x186 <_Z8send_intl+0x52>
 184:	88 2d       	mov	r24, r8
 186:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
 18a:	21 97       	sbiw	r28, 0x01	; 1
 18c:	78 f7       	brcc	.-34     	; 0x16c <_Z8send_intl+0x38>
 18e:	cf e0       	ldi	r28, 0x0F	; 15
 190:	d0 e0       	ldi	r29, 0x00	; 0
	}
	for(uint8_t n = 0; n < 16; ++n){
		tmp_bit = static_cast < int16_t >(1) << (15-n);
		tmp_data = (number & tmp_bit);
		send_save(tmp_data);
 192:	01 e0       	ldi	r16, 0x01	; 1
 194:	10 e0       	ldi	r17, 0x00	; 0
 196:	bb 24       	eor	r11, r11
 198:	b3 94       	inc	r11
 19a:	a1 2c       	mov	r10, r1
 19c:	a8 01       	movw	r20, r16
 19e:	0c 2e       	mov	r0, r28
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <_Z8send_intl+0x72>
 1a2:	44 0f       	add	r20, r20
 1a4:	55 1f       	adc	r21, r21
 1a6:	0a 94       	dec	r0
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <_Z8send_intl+0x6e>
 1aa:	05 2e       	mov	r0, r21
 1ac:	00 0c       	add	r0, r0
 1ae:	66 0b       	sbc	r22, r22
 1b0:	77 0b       	sbc	r23, r23
 1b2:	4c 21       	and	r20, r12
 1b4:	5d 21       	and	r21, r13
 1b6:	6e 21       	and	r22, r14
 1b8:	7f 21       	and	r23, r15
 1ba:	8b 2d       	mov	r24, r11
 1bc:	45 2b       	or	r20, r21
 1be:	46 2b       	or	r20, r22
 1c0:	47 2b       	or	r20, r23
 1c2:	09 f4       	brne	.+2      	; 0x1c6 <_Z8send_intl+0x92>
 1c4:	8a 2d       	mov	r24, r10
 1c6:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
 1ca:	21 97       	sbiw	r28, 0x01	; 1
 1cc:	38 f7       	brcc	.-50     	; 0x19c <_Z8send_intl+0x68>
	}
}
 1ce:	df 91       	pop	r29
 1d0:	cf 91       	pop	r28
 1d2:	1f 91       	pop	r17
 1d4:	0f 91       	pop	r16
 1d6:	ff 90       	pop	r15
 1d8:	ef 90       	pop	r14
 1da:	df 90       	pop	r13
 1dc:	cf 90       	pop	r12
 1de:	bf 90       	pop	r11
 1e0:	af 90       	pop	r10
 1e2:	9f 90       	pop	r9
 1e4:	8f 90       	pop	r8
 1e6:	08 95       	ret

000001e8 <_Z12clear_screenv>:

void clear_screen(){
	send_save(0);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
	send_save(0);
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9send_saveb>
 1f4:	08 95       	ret

000001f6 <_Z10timer_stopv>:
void timer_start(){
	TCCR1B = 0b101;						// set prescaler to 1024 and start timer
}

void timer_stop(){
	TCCR1B = 0b000;						// stop timer
 1f6:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TCNT1H = 0;
 1fa:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCNT1L = 0;
 1fe:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 202:	08 95       	ret

00000204 <_Z10timer_readv>:
}

uint16_t timer_read(){
	return (TCNT1H << 8) + TCNT1L;
 204:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 208:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	98 2f       	mov	r25, r24
 210:	88 27       	eor	r24, r24
}
 212:	82 0f       	add	r24, r18
 214:	91 1d       	adc	r25, r1
 216:	08 95       	ret

00000218 <main>:
char tx_buffer[] = "Hallo";
uint32_t time_stamp = 0;

int main(void)
{
	GPIO_Init();
 218:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9GPIO_Initv>
	connect();
 21c:	0e 94 8c 00 	call	0x118	; 0x118 <_Z7connectv>

#include "display.h"
#include <avr/io.h>

void timer_start(){
	TCCR1B = 0b101;						// set prescaler to 1024 and start timer
 220:	01 e8       	ldi	r16, 0x81	; 129
 222:	10 e0       	ldi	r17, 0x00	; 0
 224:	c5 e0       	ldi	r28, 0x05	; 5
 226:	f8 01       	movw	r30, r16
 228:	c0 83       	st	Z, r28
	
    /* Replace with your application code */
    while (1) 
    {	
		timer_start();
		if(timer_read() > (1024*16)){
 22a:	0e 94 02 01 	call	0x204	; 0x204 <_Z10timer_readv>
 22e:	81 30       	cpi	r24, 0x01	; 1
 230:	90 44       	sbci	r25, 0x40	; 64
 232:	c8 f3       	brcs	.-14     	; 0x226 <main+0xe>
			clear_screen();
 234:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <_Z12clear_screenv>
			send_int(time_stamp);
 238:	60 91 01 01 	lds	r22, 0x0101	; 0x800101 <time_stamp>
 23c:	70 91 02 01 	lds	r23, 0x0102	; 0x800102 <time_stamp+0x1>
 240:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <time_stamp+0x2>
 244:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <time_stamp+0x3>
 248:	0e 94 9a 00 	call	0x134	; 0x134 <_Z8send_intl>
			timer_stop();
 24c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_Z10timer_stopv>
			time_stamp++;
 250:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <time_stamp>
 254:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <time_stamp+0x1>
 258:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <time_stamp+0x2>
 25c:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <time_stamp+0x3>
 260:	01 96       	adiw	r24, 0x01	; 1
 262:	a1 1d       	adc	r26, r1
 264:	b1 1d       	adc	r27, r1
 266:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <time_stamp>
 26a:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <time_stamp+0x1>
 26e:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <time_stamp+0x2>
 272:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <time_stamp+0x3>
 276:	d7 cf       	rjmp	.-82     	; 0x226 <main+0xe>

00000278 <_exit>:
 278:	f8 94       	cli

0000027a <__stop_program>:
 27a:	ff cf       	rjmp	.-2      	; 0x27a <__stop_program>
