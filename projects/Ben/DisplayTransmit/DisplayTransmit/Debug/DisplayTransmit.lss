
DisplayTransmit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001d2  00000266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800106  00800106  0000026c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009ac  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000730  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000322  00000000  00000000  00001418  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000ec  00000000  00000000  0000173c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b5  00000000  00000000  00001828  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000355  00000000  00000000  00001cdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00002032  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ed       	ldi	r30, 0xD2	; 210
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e0       	ldi	r26, 0x06	; 6
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a7 30       	cpi	r26, 0x07	; 7
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  9e:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9GPIO_Initv>:
		while(1){};
    }
}

void GPIO_Init(){
	DDRD |= 0b00000110;
  a6:	8a b1       	in	r24, 0x0a	; 10
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	8a b9       	out	0x0a, r24	; 10
  ac:	08 95       	ret

000000ae <_Z12read_confirmv>:
}
bool read_confirm(){
	return (PORTD & 0b00000001);
  ae:	8b b1       	in	r24, 0x0b	; 11
}
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	08 95       	ret

000000b4 <_Z10set_outputb6Output>:
void set_output(bool bit, Output out){
	if(bit)
  b4:	88 23       	and	r24, r24
  b6:	21 f0       	breq	.+8      	; 0xc0 <_Z10set_outputb6Output+0xc>
		PORTD |= static_cast<uint8_t>(out);
  b8:	8b b1       	in	r24, 0x0b	; 11
  ba:	68 2b       	or	r22, r24
  bc:	6b b9       	out	0x0b, r22	; 11
  be:	08 95       	ret
	else
		PORTD &= static_cast<uint8_t>(out);
  c0:	8b b1       	in	r24, 0x0b	; 11
  c2:	68 23       	and	r22, r24
  c4:	6b b9       	out	0x0b, r22	; 11
  c6:	08 95       	ret

000000c8 <_Z8send_bitb>:
}
void send_bit(bool tx_bit){
  c8:	cf 93       	push	r28
  ca:	c8 2f       	mov	r28, r24
	while(read_confirm() != false){
  cc:	0e 94 57 00 	call	0xae	; 0xae <_Z12read_confirmv>
  d0:	81 11       	cpse	r24, r1
  d2:	fc cf       	rjmp	.-8      	; 0xcc <_Z8send_bitb+0x4>
	}
	set_output(tx_bit, Output::DATA);
  d4:	62 e0       	ldi	r22, 0x02	; 2
  d6:	8c 2f       	mov	r24, r28
  d8:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
	set_output(1, Output::LATCH);
  dc:	64 e0       	ldi	r22, 0x04	; 4
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
	while(read_confirm() != true){
  e4:	0e 94 57 00 	call	0xae	; 0xae <_Z12read_confirmv>
  e8:	88 23       	and	r24, r24
  ea:	e1 f3       	breq	.-8      	; 0xe4 <_Z8send_bitb+0x1c>
	}
	set_output(0, Output::LATCH);	
  ec:	64 e0       	ldi	r22, 0x04	; 4
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	0e 94 5a 00 	call	0xb4	; 0xb4 <_Z10set_outputb6Output>
}
  f4:	cf 91       	pop	r28
  f6:	08 95       	ret

000000f8 <_Z9send_saveb>:
void send_save(bool tx_bit){
	send_bit(tx_bit);
  f8:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8send_bitb>
	++position;
  fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__data_end>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <__data_end>
	if(position <= 4){
 106:	85 30       	cpi	r24, 0x05	; 5
 108:	18 f4       	brcc	.+6      	; 0x110 <_Z9send_saveb+0x18>
		send_bit(1);	
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8send_bitb>
 110:	08 95       	ret

00000112 <_Z7connectv>:
	}
}
void connect(){
 112:	cf 93       	push	r28
	send_bit(1);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8send_bitb>
 11a:	c5 e0       	ldi	r28, 0x05	; 5
	for(uint8_t n = 0; n < 5; ++n){
		send_bit(0);	
 11c:	80 e0       	ldi	r24, 0x00	; 0
 11e:	0e 94 64 00 	call	0xc8	; 0xc8 <_Z8send_bitb>
 122:	c1 50       	subi	r28, 0x01	; 1
		send_bit(1);	
	}
}
void connect(){
	send_bit(1);
	for(uint8_t n = 0; n < 5; ++n){
 124:	d9 f7       	brne	.-10     	; 0x11c <_Z7connectv+0xa>
		send_bit(0);	
	}
	position = 0;
 126:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <__data_end>
}
 12a:	cf 91       	pop	r28
 12c:	08 95       	ret

0000012e <_Z9send_charc>:
void send_char(char character){
 12e:	df 92       	push	r13
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	08 2f       	mov	r16, r24
	bool tmp_data = false;
	uint8_t	tmp_bit	= 0;
	send_save(1);
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z9send_saveb>
	send_save(0);
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z9send_saveb>
 14a:	c7 e0       	ldi	r28, 0x07	; 7
 14c:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t n = 0; n < 8; ++n){
		tmp_bit = 0b00000001 << (7-n);
		tmp_data = (character & tmp_bit);
		send_save(tmp_data);
 14e:	ee 24       	eor	r14, r14
 150:	e3 94       	inc	r14
 152:	f1 2c       	mov	r15, r1
 154:	11 e0       	ldi	r17, 0x01	; 1
 156:	d1 2c       	mov	r13, r1
 158:	c7 01       	movw	r24, r14
 15a:	0c 2e       	mov	r0, r28
 15c:	02 c0       	rjmp	.+4      	; 0x162 <_Z9send_charc+0x34>
 15e:	88 0f       	add	r24, r24
 160:	99 1f       	adc	r25, r25
 162:	0a 94       	dec	r0
 164:	e2 f7       	brpl	.-8      	; 0x15e <_Z9send_charc+0x30>
 166:	90 2f       	mov	r25, r16
 168:	98 23       	and	r25, r24
 16a:	81 2f       	mov	r24, r17
 16c:	09 f4       	brne	.+2      	; 0x170 <_Z9send_charc+0x42>
 16e:	8d 2d       	mov	r24, r13
 170:	0e 94 7c 00 	call	0xf8	; 0xf8 <_Z9send_saveb>
 174:	21 97       	sbiw	r28, 0x01	; 1
 176:	80 f7       	brcc	.-32     	; 0x158 <_Z9send_charc+0x2a>
	}
}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	1f 91       	pop	r17
 17e:	0f 91       	pop	r16
 180:	ff 90       	pop	r15
 182:	ef 90       	pop	r14
 184:	df 90       	pop	r13
 186:	08 95       	ret

00000188 <_Z12send_messagePKch>:

void send_message(const char* value, uint8_t count){
 188:	0f 93       	push	r16
 18a:	1f 93       	push	r17
 18c:	cf 93       	push	r28
 18e:	df 93       	push	r29
	for(uint8_t n = 0; n < count; ++n){
 190:	66 23       	and	r22, r22
 192:	71 f0       	breq	.+28     	; 0x1b0 <_Z12send_messagePKch+0x28>
 194:	ec 01       	movw	r28, r24
 196:	61 50       	subi	r22, 0x01	; 1
 198:	06 2f       	mov	r16, r22
 19a:	10 e0       	ldi	r17, 0x00	; 0
 19c:	0f 5f       	subi	r16, 0xFF	; 255
 19e:	1f 4f       	sbci	r17, 0xFF	; 255
 1a0:	08 0f       	add	r16, r24
 1a2:	19 1f       	adc	r17, r25
		send_char(value[n]);
 1a4:	89 91       	ld	r24, Y+
 1a6:	0e 94 97 00 	call	0x12e	; 0x12e <_Z9send_charc>
		send_save(tmp_data);
	}
}

void send_message(const char* value, uint8_t count){
	for(uint8_t n = 0; n < count; ++n){
 1aa:	c0 17       	cp	r28, r16
 1ac:	d1 07       	cpc	r29, r17
 1ae:	d1 f7       	brne	.-12     	; 0x1a4 <_Z12send_messagePKch+0x1c>
		send_char(value[n]);
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	08 95       	ret

000001ba <main>:



int main(void)
{
	GPIO_Init();
 1ba:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9GPIO_Initv>

    /* Replace with your application code */
    while (1) 
    {	connect();
 1be:	0e 94 89 00 	call	0x112	; 0x112 <_Z7connectv>
		send_message(&tx_buffer[0], sizeof(tx_buffer));
 1c2:	66 e0       	ldi	r22, 0x06	; 6
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	0e 94 c4 00 	call	0x188	; 0x188 <_Z12send_messagePKch>
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x12>

000001ce <_exit>:
 1ce:	f8 94       	cli

000001d0 <__stop_program>:
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <__stop_program>
