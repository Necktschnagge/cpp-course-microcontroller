
CppCourseTask2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000122  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000176  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a9  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000713  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002e3  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000014b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000493  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001a8  00000000  00000000  0000198f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b37  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  78:	0c 94 8f 00 	jmp	0x11e	; 0x11e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z9GPIO_Initv>:
inline bool is_pressed(ButtonTypeDef button){
	return (!(PIND & static_cast<uint8_t>(button)));
}

void GPIO_Init(){
	DDRD |= 0b00000001;
  80:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= 0b00000110;
  82:	8b b1       	in	r24, 0x0b	; 11
  84:	86 60       	ori	r24, 0x06	; 6
  86:	8b b9       	out	0x0b, r24	; 11
  88:	08 95       	ret

0000008a <_Z9LED_Blinkv>:
}

void LED_Blink(){
	PORTD |= 0b00000001;
  8a:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	84 e3       	ldi	r24, 0x34	; 52
  90:	9c e0       	ldi	r25, 0x0C	; 12
  92:	21 50       	subi	r18, 0x01	; 1
  94:	80 40       	sbci	r24, 0x00	; 0
  96:	90 40       	sbci	r25, 0x00	; 0
  98:	e1 f7       	brne	.-8      	; 0x92 <_Z9LED_Blinkv+0x8>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_Z9LED_Blinkv+0x12>
  9c:	00 00       	nop
	_delay_ms(250);
	PORTD &= 0b11111110;
  9e:	58 98       	cbi	0x0b, 0	; 11
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	84 e3       	ldi	r24, 0x34	; 52
  a4:	9c e0       	ldi	r25, 0x0C	; 12
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <_Z9LED_Blinkv+0x1c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_Z9LED_Blinkv+0x26>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <main>:
{
	uint16_t	counter {0};
	uint16_t	blinker {0};
	uint32_t	timeout {2000};
	
	GPIO_Init();
  b4:	0e 94 40 00 	call	0x80	; 0x80 <_Z9GPIO_Initv>


int main(void)
{
	uint16_t	counter {0};
	uint16_t	blinker {0};
  b8:	c0 e0       	ldi	r28, 0x00	; 0
  ba:	d0 e0       	ldi	r29, 0x00	; 0
void GPIO_Init(); // Nur-Deklaration


int main(void)
{
	uint16_t	counter {0};
  bc:	00 e0       	ldi	r16, 0x00	; 0
  be:	10 e0       	ldi	r17, 0x00	; 0
	
	GPIO_Init();
	
	/* Replace with your application code */
	while (1){
		if(is_pressed(Button1) == true){						// wenn taster gedrückt
  c0:	49 99       	sbic	0x09, 1	; 9
  c2:	0d c0       	rjmp	.+26     	; 0xde <main+0x2a>
			counter++;
  c4:	0f 5f       	subi	r16, 0xFF	; 255
  c6:	1f 4f       	sbci	r17, 0xFF	; 255
			while(is_pressed(Button1) == true){
  c8:	49 9b       	sbis	0x09, 1	; 9
  ca:	fe cf       	rjmp	.-4      	; 0xc8 <main+0x14>
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	99 e0       	ldi	r25, 0x09	; 9
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	80 40       	sbci	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x1e>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x28>
  dc:	00 00       	nop
			}
			_delay_ms(200);
		}
		if(is_pressed(Button2) == true){						// wenn taster gedrückt
  de:	4a 99       	sbic	0x09, 2	; 9
  e0:	11 c0       	rjmp	.+34     	; 0x104 <main+0x50>
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
			blinker = counter;
			while(is_pressed(Button2) == true){
  e6:	4a 99       	sbic	0x09, 2	; 9
  e8:	0c c0       	rjmp	.+24     	; 0x102 <main+0x4e>
  ea:	ef e9       	ldi	r30, 0x9F	; 159
  ec:	ff e0       	ldi	r31, 0x0F	; 15
  ee:	31 97       	sbiw	r30, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <main+0x3a>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <main+0x40>
  f4:	00 00       	nop
  f6:	01 96       	adiw	r24, 0x01	; 1
				_delay_ms(1);
				timeout--;
				if(timeout < 1){
  f8:	80 3d       	cpi	r24, 0xD0	; 208
  fa:	f7 e0       	ldi	r31, 0x07	; 7
  fc:	9f 07       	cpc	r25, r31
  fe:	99 f7       	brne	.-26     	; 0xe6 <main+0x32>
 100:	04 c0       	rjmp	.+8      	; 0x10a <main+0x56>
			while(is_pressed(Button1) == true){
			}
			_delay_ms(200);
		}
		if(is_pressed(Button2) == true){						// wenn taster gedrückt
			blinker = counter;
 102:	e8 01       	movw	r28, r16
					blinker = 20;
					break;
				}
			}
		}
		if (blinker > 0){
 104:	20 97       	sbiw	r28, 0x00	; 0
 106:	49 f0       	breq	.+18     	; 0x11a <main+0x66>
 108:	04 c0       	rjmp	.+8      	; 0x112 <main+0x5e>
			while(is_pressed(Button2) == true){
				_delay_ms(1);
				timeout--;
				if(timeout < 1){
					counter = 0;
					blinker = 20;
 10a:	c4 e1       	ldi	r28, 0x14	; 20
 10c:	d0 e0       	ldi	r29, 0x00	; 0
			blinker = counter;
			while(is_pressed(Button2) == true){
				_delay_ms(1);
				timeout--;
				if(timeout < 1){
					counter = 0;
 10e:	00 e0       	ldi	r16, 0x00	; 0
 110:	10 e0       	ldi	r17, 0x00	; 0
					break;
				}
			}
		}
		if (blinker > 0){
			LED_Blink();
 112:	0e 94 45 00 	call	0x8a	; 0x8a <_Z9LED_Blinkv>
			blinker--;
 116:	21 97       	sbiw	r28, 0x01	; 1
 118:	d3 cf       	rjmp	.-90     	; 0xc0 <main+0xc>
			timeout = 2000;
		} else {
			PORTD &= 0b11111110;
 11a:	58 98       	cbi	0x0b, 0	; 11
 11c:	d1 cf       	rjmp	.-94     	; 0xc0 <main+0xc>

0000011e <_exit>:
 11e:	f8 94       	cli

00000120 <__stop_program>:
 120:	ff cf       	rjmp	.-2      	; 0x120 <__stop_program>
