
uebung2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007d1  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006fb  00000000  00000000  000009ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ca  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001374  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000422  00000000  00000000  000013b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b4  00000000  00000000  000017da  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  0000188e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  78:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_Z5blinkj>:
	#include <util/delay.h>
};


void blink(uint16_t number){ // Led wir [number] mal kurz aufleuchten lassen.
	for (uint16_t i=0; i < number; ++i){
  80:	00 97       	sbiw	r24, 0x00	; 0
  82:	d9 f0       	breq	.+54     	; 0xba <_Z5blinkj+0x3a>
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	30 e0       	ldi	r19, 0x00	; 0
		PORTD |= 0b00000001; // LED an
  88:	58 9a       	sbi	0x0b, 0	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	4f ef       	ldi	r20, 0xFF	; 255
  8c:	59 e6       	ldi	r21, 0x69	; 105
  8e:	68 e1       	ldi	r22, 0x18	; 24
  90:	41 50       	subi	r20, 0x01	; 1
  92:	50 40       	sbci	r21, 0x00	; 0
  94:	60 40       	sbci	r22, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <_Z5blinkj+0x10>
  98:	00 c0       	rjmp	.+0      	; 0x9a <_Z5blinkj+0x1a>
  9a:	00 00       	nop
		_delay_ms(500);
		PORTD &= 0b11111110; // LED aus
  9c:	58 98       	cbi	0x0b, 0	; 11
  9e:	4f ef       	ldi	r20, 0xFF	; 255
  a0:	59 e6       	ldi	r21, 0x69	; 105
  a2:	68 e1       	ldi	r22, 0x18	; 24
  a4:	41 50       	subi	r20, 0x01	; 1
  a6:	50 40       	sbci	r21, 0x00	; 0
  a8:	60 40       	sbci	r22, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <_Z5blinkj+0x24>
  ac:	00 c0       	rjmp	.+0      	; 0xae <_Z5blinkj+0x2e>
  ae:	00 00       	nop
	#include <util/delay.h>
};


void blink(uint16_t number){ // Led wir [number] mal kurz aufleuchten lassen.
	for (uint16_t i=0; i < number; ++i){
  b0:	2f 5f       	subi	r18, 0xFF	; 255
  b2:	3f 4f       	sbci	r19, 0xFF	; 255
  b4:	82 17       	cp	r24, r18
  b6:	93 07       	cpc	r25, r19
  b8:	39 f7       	brne	.-50     	; 0x88 <_Z5blinkj+0x8>
  ba:	08 95       	ret

000000bc <_Z9GPIO_Initv>:




void GPIO_Init(){
	DDRD |= 0b00000001;
  bc:	50 9a       	sbi	0x0a, 0	; 10
	PORTD |= 0b00000110;
  be:	8b b1       	in	r24, 0x0b	; 11
  c0:	86 60       	ori	r24, 0x06	; 6
  c2:	8b b9       	out	0x0b, r24	; 11
  c4:	08 95       	ret

000000c6 <main>:
int main(void)

{
	uint16_t counter {0};
	
	GPIO_Init();
  c6:	0e 94 5e 00 	call	0xbc	; 0xbc <_Z9GPIO_Initv>

		if (!(PIND & 0b100)) { // wenn taster gedrückt
  ca:	4a 99       	sbic	0x09, 2	; 9
  cc:	04 c0       	rjmp	.+8      	; 0xd6 <main+0x10>
			blink(counter);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 40 00 	call	0x80	; 0x80 <_Z5blinkj>
			}
		if (!(PIND & 0b010)){
  d6:	49 99       	sbic	0x09, 1	; 9
  d8:	02 c0       	rjmp	.+4      	; 0xde <main+0x18>
			++counter;
			while(!(PIND & 0b010)){
  da:	49 9b       	sbis	0x09, 1	; 9
  dc:	fe cf       	rjmp	.-4      	; 0xda <main+0x14>
			}
		}
	
			
	}
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	08 95       	ret

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
