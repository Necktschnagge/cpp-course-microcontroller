
uebung2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000582  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000050e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800100  00800100  00000582  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000582  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000005b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000005f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e24  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087f  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039d  00000000  00000000  00001cd7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00002074  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000064c  00000000  00000000  00002148  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001164  00000000  00000000  00002794  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  000038f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a8 30       	cpi	r26, 0x08	; 8
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 97 00 	call	0x12e	; 0x12e <main>
  88:	0c 94 85 02 	jmp	0x50a	; 0x50a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z9GPIO_initv>:
}

	/* interrupt subroutine */
ISR (__vector_TIMER0_OVF){
	++clock::counter;
}
  90:	50 9a       	sbi	0x0a, 0	; 10
  92:	8b b1       	in	r24, 0x0b	; 11
  94:	86 60       	ori	r24, 0x06	; 6
  96:	8b b9       	out	0x0b, r24	; 11
  98:	08 95       	ret

0000009a <_ZN5clock4initEv>:
  9a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  9e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  a2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <_edata+0x2>
  a6:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <_edata+0x3>
  aa:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <_edata+0x4>
  ae:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <_edata+0x5>
  b2:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <_edata+0x6>
  b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <_edata+0x7>
  ba:	f8 94       	cli
  bc:	14 bc       	out	0x24, r1	; 36
  be:	16 bc       	out	0x26, r1	; 38
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
  c6:	85 e0       	ldi	r24, 0x05	; 5
  c8:	85 bd       	out	0x25, r24	; 37
  ca:	78 94       	sei
  cc:	08 95       	ret

000000ce <_ZN5clock8get_timeEv>:
  ce:	af 92       	push	r10
  d0:	bf 92       	push	r11
  d2:	cf 92       	push	r12
  d4:	df 92       	push	r13
  d6:	ef 92       	push	r14
  d8:	ff 92       	push	r15
  da:	0f 93       	push	r16
  dc:	1f 93       	push	r17
  de:	8f b7       	in	r24, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	a6 b4       	in	r10, 0x26	; 38
  e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <_edata>
  e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <_edata+0x1>
  ec:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <_edata+0x2>
  f0:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <_edata+0x3>
  f4:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <_edata+0x4>
  f8:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <_edata+0x5>
  fc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <_edata+0x6>
 100:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <_edata+0x7>
 104:	08 e0       	ldi	r16, 0x08	; 8
 106:	0e 94 42 02 	call	0x484	; 0x484 <__ashldi3>
 10a:	b1 2c       	mov	r11, r1
 10c:	c1 2c       	mov	r12, r1
 10e:	d1 2c       	mov	r13, r1
 110:	e1 2c       	mov	r14, r1
 112:	f1 2c       	mov	r15, r1
 114:	00 e0       	ldi	r16, 0x00	; 0
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__adddi3>
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	ff 90       	pop	r15
 122:	ef 90       	pop	r14
 124:	df 90       	pop	r13
 126:	cf 90       	pop	r12
 128:	bf 90       	pop	r11
 12a:	af 90       	pop	r10
 12c:	08 95       	ret

0000012e <main>:
};



int main(void)
{
 12e:	cf 93       	push	r28
 130:	df 93       	push	r29
 132:	cd b7       	in	r28, 0x3d	; 61
 134:	de b7       	in	r29, 0x3e	; 62
 136:	aa 97       	sbiw	r28, 0x2a	; 42
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	f8 94       	cli
 13c:	de bf       	out	0x3e, r29	; 62
 13e:	0f be       	out	0x3f, r0	; 63
 140:	cd bf       	out	0x3d, r28	; 61
	GPIO_init();
 142:	0e 94 48 00 	call	0x90	; 0x90 <_Z9GPIO_initv>
	clock::init();
 146:	0e 94 4d 00 	call	0x9a	; 0x9a <_ZN5clock4initEv>
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
		this->blinks_left_doubled = 2 * blinks;
		swap_timeout = clock::ZEROTime;
 14a:	19 86       	std	Y+9, r1	; 0x09
 14c:	1a 86       	std	Y+10, r1	; 0x0a
 14e:	1b 86       	std	Y+11, r1	; 0x0b
 150:	1c 86       	std	Y+12, r1	; 0x0c
 152:	1d 86       	std	Y+13, r1	; 0x0d
 154:	1e 86       	std	Y+14, r1	; 0x0e
 156:	1f 86       	std	Y+15, r1	; 0x0f
 158:	18 8a       	std	Y+16, r1	; 0x10
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
		this->blinks_left_doubled = 2 * blinks;
 15a:	08 e2       	ldi	r16, 0x28	; 40
 15c:	09 83       	std	Y+1, r16	; 0x01
 15e:	1a 82       	std	Y+2, r1	; 0x02
 160:	1b 82       	std	Y+3, r1	; 0x03
 162:	1c 82       	std	Y+4, r1	; 0x04
 164:	1d 82       	std	Y+5, r1	; 0x05
 166:	1e 82       	std	Y+6, r1	; 0x06
 168:	1f 82       	std	Y+7, r1	; 0x07
 16a:	18 86       	std	Y+8, r1	; 0x08
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
 16c:	1a e1       	ldi	r17, 0x1A	; 26
 16e:	19 8f       	std	Y+25, r17	; 0x19
 170:	26 e0       	ldi	r18, 0x06	; 6
 172:	2a 8f       	std	Y+26, r18	; 0x1a
 174:	1b 8e       	std	Y+27, r1	; 0x1b
 176:	1c 8e       	std	Y+28, r1	; 0x1c
 178:	1d 8e       	std	Y+29, r1	; 0x1d
 17a:	1e 8e       	std	Y+30, r1	; 0x1e
 17c:	1f 8e       	std	Y+31, r1	; 0x1f
 17e:	18 a2       	std	Y+32, r1	; 0x20
	
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
 180:	3a e1       	ldi	r19, 0x1A	; 26
 182:	39 a3       	std	Y+33, r19	; 0x21
 184:	46 e0       	ldi	r20, 0x06	; 6
 186:	4a a3       	std	Y+34, r20	; 0x22
 188:	1b a2       	std	Y+35, r1	; 0x23
 18a:	1c a2       	std	Y+36, r1	; 0x24
 18c:	1d a2       	std	Y+37, r1	; 0x25
 18e:	1e a2       	std	Y+38, r1	; 0x26
 190:	1f a2       	std	Y+39, r1	; 0x27
 192:	18 a6       	std	Y+40, r1	; 0x28
	bool pin_new;
	
	Time ignore_until;
	
public:
	Preller(bool initial_pin) : pin_old(initial_pin), pin_new(initial_pin), ignore_until(clock::ZEROTime){}
 194:	01 e0       	ldi	r16, 0x01	; 1
 196:	55 24       	eor	r5, r5
 198:	53 94       	inc	r5
	Preller c_preller(1); // for counter pin;
	Preller p_preller(1); // for printer pin / output pin;
	
	clock::Time reached_reset{ clock::INFINITYTime};
	
	bool do_not_print {false};
 19a:	81 2c       	mov	r8, r1
	blinker.set(clock::ONESecond / 10, clock::ONESecond / 10, 20);

	Preller c_preller(1); // for counter pin;
	Preller p_preller(1); // for printer pin / output pin;
	
	clock::Time reached_reset{ clock::INFINITYTime};
 19c:	1f ef       	ldi	r17, 0xFF	; 255
 19e:	19 8b       	std	Y+17, r17	; 0x11
 1a0:	2f ef       	ldi	r18, 0xFF	; 255
 1a2:	2a 8b       	std	Y+18, r18	; 0x12
 1a4:	3f ef       	ldi	r19, 0xFF	; 255
 1a6:	3b 8b       	std	Y+19, r19	; 0x13
 1a8:	4f ef       	ldi	r20, 0xFF	; 255
 1aa:	4c 8b       	std	Y+20, r20	; 0x14
 1ac:	5f ef       	ldi	r21, 0xFF	; 255
 1ae:	5d 8b       	std	Y+21, r21	; 0x15
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	6e 8b       	std	Y+22, r22	; 0x16
 1b4:	7f ef       	ldi	r23, 0xFF	; 255
 1b6:	7f 8b       	std	Y+23, r23	; 0x17
 1b8:	8f ef       	ldi	r24, 0xFF	; 255
 1ba:	88 8f       	std	Y+24, r24	; 0x18
int main(void)
{
	GPIO_init();
	clock::init();

	uint16_t counter {0};
 1bc:	61 2c       	mov	r6, r1
 1be:	71 2c       	mov	r7, r1
		if ((!p_preller.new_value()) && (clock::get_time() > reached_reset)){ // print button is pressed for longer than 2s
			counter = 0;
			blinker.stop();
			blinker.set(clock::ONESecond / 10, clock::ONESecond / 10, 20);
			reached_reset = clock::INFINITYTime;
			do_not_print = true;
 1c0:	09 a7       	std	Y+41, r16	; 0x29
	
	
	while (true){ // central control loop
		
		// neue entprellte inputs pollen:
		c_preller(clock::get_time(),PIND & 0b010);
 1c2:	09 b1       	in	r16, 0x09	; 9
 1c4:	0a a7       	std	Y+42, r16	; 0x2a
 1c6:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
	Time ignore_until;
	
public:
	Preller(bool initial_pin) : pin_old(initial_pin), pin_new(initial_pin), ignore_until(clock::ZEROTime){}
	
	inline void latch(){ pin_old = pin_new; }
 1ca:	15 2d       	mov	r17, r5
	
	void operator()(Time now, bool input){
		latch();
		if (now > ignore_until){
 1cc:	a0 e0       	ldi	r26, 0x00	; 0
 1ce:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpdi2_s8>
 1d2:	19 f0       	breq	.+6      	; 0x1da <main+0xac>
			pin_new = input;
 1d4:	01 fb       	bst	r16, 1
 1d6:	55 24       	eor	r5, r5
 1d8:	50 f8       	bld	r5, 0
	
	while (true){ // central control loop
		
		// neue entprellte inputs pollen:
		c_preller(clock::get_time(),PIND & 0b010);
		p_preller(clock::get_time(),PIND & 0b100);
 1da:	09 b1       	in	r16, 0x09	; 9
 1dc:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
	Time ignore_until;
	
public:
	Preller(bool initial_pin) : pin_old(initial_pin), pin_new(initial_pin), ignore_until(clock::ZEROTime){}
	
	inline void latch(){ pin_old = pin_new; }
 1e0:	e9 a5       	ldd	r30, Y+41	; 0x29
 1e2:	ea a7       	std	Y+42, r30	; 0x2a
	
	void operator()(Time now, bool input){
		latch();
		if (now > ignore_until){
 1e4:	a0 e0       	ldi	r26, 0x00	; 0
 1e6:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpdi2_s8>
 1ea:	21 f0       	breq	.+8      	; 0x1f4 <main+0xc6>
			pin_new = input;
 1ec:	02 fb       	bst	r16, 2
 1ee:	00 27       	eor	r16, r16
 1f0:	00 f9       	bld	r16, 0
 1f2:	09 a7       	std	Y+41, r16	; 0x29
		
		// neue entprellte inputs pollen:
		c_preller(clock::get_time(),PIND & 0b010);
		p_preller(clock::get_time(),PIND & 0b100);
		
		if ((!c_preller.value())&&(c_preller.new_value())){ // rising edge on counter button // release counter button
 1f4:	11 11       	cpse	r17, r1
 1f6:	05 c0       	rjmp	.+10     	; 0x202 <main+0xd4>
 1f8:	55 20       	and	r5, r5
 1fa:	19 f0       	breq	.+6      	; 0x202 <main+0xd4>
			++counter;
 1fc:	0f ef       	ldi	r16, 0xFF	; 255
 1fe:	60 1a       	sub	r6, r16
 200:	70 0a       	sbc	r7, r16
		}
		
		if (p_preller.value() && (!p_preller.new_value())){ // falling edge on print button // press print button
 202:	1a a5       	ldd	r17, Y+42	; 0x2a
 204:	11 23       	and	r17, r17
 206:	a9 f0       	breq	.+42     	; 0x232 <main+0x104>
 208:	29 a5       	ldd	r18, Y+41	; 0x29
 20a:	21 11       	cpse	r18, r1
 20c:	12 c0       	rjmp	.+36     	; 0x232 <main+0x104>
			reached_reset = clock::get_time() + 2 * clock::ONESecond;
 20e:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
 212:	2e 5e       	subi	r18, 0xEE	; 238
 214:	35 48       	sbci	r19, 0x85	; 133
 216:	4f 4f       	sbci	r20, 0xFF	; 255
 218:	5f 4f       	sbci	r21, 0xFF	; 255
 21a:	6f 4f       	sbci	r22, 0xFF	; 255
 21c:	7f 4f       	sbci	r23, 0xFF	; 255
 21e:	8f 4f       	sbci	r24, 0xFF	; 255
 220:	9f 4f       	sbci	r25, 0xFF	; 255
 222:	29 8b       	std	Y+17, r18	; 0x11
 224:	3a 8b       	std	Y+18, r19	; 0x12
 226:	4b 8b       	std	Y+19, r20	; 0x13
 228:	5c 8b       	std	Y+20, r21	; 0x14
 22a:	6d 8b       	std	Y+21, r22	; 0x15
 22c:	7e 8b       	std	Y+22, r23	; 0x16
 22e:	8f 8b       	std	Y+23, r24	; 0x17
 230:	98 8f       	std	Y+24, r25	; 0x18
		}
		
		if ((!p_preller.new_value()) && (clock::get_time() > reached_reset)){ // print button is pressed for longer than 2s
 232:	39 a5       	ldd	r19, Y+41	; 0x29
 234:	31 11       	cpse	r19, r1
 236:	21 c1       	rjmp	.+578    	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 238:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
 23c:	a2 2e       	mov	r10, r18
 23e:	b3 2e       	mov	r11, r19
 240:	c4 2e       	mov	r12, r20
 242:	d5 2e       	mov	r13, r21
 244:	e6 2e       	mov	r14, r22
 246:	f7 2e       	mov	r15, r23
 248:	08 2f       	mov	r16, r24
 24a:	19 2f       	mov	r17, r25
 24c:	29 89       	ldd	r18, Y+17	; 0x11
 24e:	3a 89       	ldd	r19, Y+18	; 0x12
 250:	4b 89       	ldd	r20, Y+19	; 0x13
 252:	5c 89       	ldd	r21, Y+20	; 0x14
 254:	6d 89       	ldd	r22, Y+21	; 0x15
 256:	7e 89       	ldd	r23, Y+22	; 0x16
 258:	8f 89       	ldd	r24, Y+23	; 0x17
 25a:	98 8d       	ldd	r25, Y+24	; 0x18
 25c:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__cmpdi2>
 260:	08 f0       	brcs	.+2      	; 0x264 <main+0x136>
 262:	7c c0       	rjmp	.+248    	; 0x35c <main+0x22e>
	
	uint64_t blinks_left_doubled;
	
	Time swap_timeout;
	
	inline void led_off(){PORTD &= 0b11111110;}
 264:	58 98       	cbi	0x0b, 0	; 11
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
		this->blinks_left_doubled = 2 * blinks;
		swap_timeout = clock::ZEROTime;
 266:	19 86       	std	Y+9, r1	; 0x09
 268:	1a 86       	std	Y+10, r1	; 0x0a
 26a:	1b 86       	std	Y+11, r1	; 0x0b
 26c:	1c 86       	std	Y+12, r1	; 0x0c
 26e:	1d 86       	std	Y+13, r1	; 0x0d
 270:	1e 86       	std	Y+14, r1	; 0x0e
 272:	1f 86       	std	Y+15, r1	; 0x0f
 274:	18 8a       	std	Y+16, r1	; 0x10
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
		this->blinks_left_doubled = 2 * blinks;
 276:	48 e2       	ldi	r20, 0x28	; 40
 278:	49 83       	std	Y+1, r20	; 0x01
 27a:	1a 82       	std	Y+2, r1	; 0x02
 27c:	1b 82       	std	Y+3, r1	; 0x03
 27e:	1c 82       	std	Y+4, r1	; 0x04
 280:	1d 82       	std	Y+5, r1	; 0x05
 282:	1e 82       	std	Y+6, r1	; 0x06
 284:	1f 82       	std	Y+7, r1	; 0x07
 286:	18 86       	std	Y+8, r1	; 0x08
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
 288:	5a e1       	ldi	r21, 0x1A	; 26
 28a:	59 8f       	std	Y+25, r21	; 0x19
 28c:	66 e0       	ldi	r22, 0x06	; 6
 28e:	6a 8f       	std	Y+26, r22	; 0x1a
 290:	1b 8e       	std	Y+27, r1	; 0x1b
 292:	1c 8e       	std	Y+28, r1	; 0x1c
 294:	1d 8e       	std	Y+29, r1	; 0x1d
 296:	1e 8e       	std	Y+30, r1	; 0x1e
 298:	1f 8e       	std	Y+31, r1	; 0x1f
 29a:	18 a2       	std	Y+32, r1	; 0x20
	
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
 29c:	7a e1       	ldi	r23, 0x1A	; 26
 29e:	79 a3       	std	Y+33, r23	; 0x21
 2a0:	86 e0       	ldi	r24, 0x06	; 6
 2a2:	8a a3       	std	Y+34, r24	; 0x22
 2a4:	1b a2       	std	Y+35, r1	; 0x23
 2a6:	1c a2       	std	Y+36, r1	; 0x24
 2a8:	1d a2       	std	Y+37, r1	; 0x25
 2aa:	1e a2       	std	Y+38, r1	; 0x26
 2ac:	1f a2       	std	Y+39, r1	; 0x27
 2ae:	18 a6       	std	Y+40, r1	; 0x28
		if ((!p_preller.new_value()) && (clock::get_time() > reached_reset)){ // print button is pressed for longer than 2s
			counter = 0;
			blinker.stop();
			blinker.set(clock::ONESecond / 10, clock::ONESecond / 10, 20);
			reached_reset = clock::INFINITYTime;
			do_not_print = true;
 2b0:	88 24       	eor	r8, r8
 2b2:	83 94       	inc	r8
		
		if ((!p_preller.new_value()) && (clock::get_time() > reached_reset)){ // print button is pressed for longer than 2s
			counter = 0;
			blinker.stop();
			blinker.set(clock::ONESecond / 10, clock::ONESecond / 10, 20);
			reached_reset = clock::INFINITYTime;
 2b4:	ef ef       	ldi	r30, 0xFF	; 255
 2b6:	e9 8b       	std	Y+17, r30	; 0x11
 2b8:	0f ef       	ldi	r16, 0xFF	; 255
 2ba:	0a 8b       	std	Y+18, r16	; 0x12
 2bc:	1f ef       	ldi	r17, 0xFF	; 255
 2be:	1b 8b       	std	Y+19, r17	; 0x13
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	2c 8b       	std	Y+20, r18	; 0x14
 2c4:	3f ef       	ldi	r19, 0xFF	; 255
 2c6:	3d 8b       	std	Y+21, r19	; 0x15
 2c8:	4f ef       	ldi	r20, 0xFF	; 255
 2ca:	4e 8b       	std	Y+22, r20	; 0x16
 2cc:	5f ef       	ldi	r21, 0xFF	; 255
 2ce:	5f 8b       	std	Y+23, r21	; 0x17
 2d0:	6f ef       	ldi	r22, 0xFF	; 255
 2d2:	68 8f       	std	Y+24, r22	; 0x18
		if (p_preller.value() && (!p_preller.new_value())){ // falling edge on print button // press print button
			reached_reset = clock::get_time() + 2 * clock::ONESecond;
		}
		
		if ((!p_preller.new_value()) && (clock::get_time() > reached_reset)){ // print button is pressed for longer than 2s
			counter = 0;
 2d4:	61 2c       	mov	r6, r1
 2d6:	71 2c       	mov	r7, r1
 2d8:	41 c0       	rjmp	.+130    	; 0x35c <main+0x22e>
			reached_reset = clock::INFINITYTime;
			do_not_print = true;
		}
		
		if ((!p_preller.value())&& p_preller.new_value()){ // print button is released
			if (!do_not_print){ // if this was rather a reset than a print then do not print
 2da:	81 10       	cpse	r8, r1
 2dc:	3e c0       	rjmp	.+124    	; 0x35a <main+0x22c>
				if (blinker.is_finished()){
 2de:	29 81       	ldd	r18, Y+1	; 0x01
 2e0:	3a 81       	ldd	r19, Y+2	; 0x02
 2e2:	4b 81       	ldd	r20, Y+3	; 0x03
 2e4:	5c 81       	ldd	r21, Y+4	; 0x04
 2e6:	6d 81       	ldd	r22, Y+5	; 0x05
 2e8:	7e 81       	ldd	r23, Y+6	; 0x06
 2ea:	8f 81       	ldd	r24, Y+7	; 0x07
 2ec:	98 85       	ldd	r25, Y+8	; 0x08
 2ee:	a0 e0       	ldi	r26, 0x00	; 0
 2f0:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpdi2_s8>
 2f4:	09 f0       	breq	.+2      	; 0x2f8 <main+0x1ca>
 2f6:	b6 c0       	rjmp	.+364    	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
		this->blinks_left_doubled = 2 * blinks;
 2f8:	c3 01       	movw	r24, r6
 2fa:	a0 e0       	ldi	r26, 0x00	; 0
 2fc:	b0 e0       	ldi	r27, 0x00	; 0
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	aa 1f       	adc	r26, r26
 304:	bb 1f       	adc	r27, r27
 306:	8c 01       	movw	r16, r24
 308:	9d 01       	movw	r18, r26
 30a:	40 e0       	ldi	r20, 0x00	; 0
 30c:	50 e0       	ldi	r21, 0x00	; 0
 30e:	ba 01       	movw	r22, r20
 310:	89 83       	std	Y+1, r24	; 0x01
 312:	1a 83       	std	Y+2, r17	; 0x02
 314:	2b 83       	std	Y+3, r18	; 0x03
 316:	3c 83       	std	Y+4, r19	; 0x04
 318:	4d 83       	std	Y+5, r20	; 0x05
 31a:	5e 83       	std	Y+6, r21	; 0x06
 31c:	6f 83       	std	Y+7, r22	; 0x07
 31e:	78 87       	std	Y+8, r23	; 0x08
		swap_timeout = clock::ZEROTime;
 320:	19 86       	std	Y+9, r1	; 0x09
 322:	1a 86       	std	Y+10, r1	; 0x0a
 324:	1b 86       	std	Y+11, r1	; 0x0b
 326:	1c 86       	std	Y+12, r1	; 0x0c
 328:	1d 86       	std	Y+13, r1	; 0x0d
 32a:	1e 86       	std	Y+14, r1	; 0x0e
 32c:	1f 86       	std	Y+15, r1	; 0x0f
 32e:	18 8a       	std	Y+16, r1	; 0x10
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
		this->off_time = off_time;
 330:	14 e8       	ldi	r17, 0x84	; 132
 332:	19 8f       	std	Y+25, r17	; 0x19
 334:	2e e1       	ldi	r18, 0x1E	; 30
 336:	2a 8f       	std	Y+26, r18	; 0x1a
 338:	1b 8e       	std	Y+27, r1	; 0x1b
 33a:	1c 8e       	std	Y+28, r1	; 0x1c
 33c:	1d 8e       	std	Y+29, r1	; 0x1d
 33e:	1e 8e       	std	Y+30, r1	; 0x1e
 340:	1f 8e       	std	Y+31, r1	; 0x1f
 342:	18 a2       	std	Y+32, r1	; 0x20
	
public:
	Blinker(): blinks_left_doubled(0), swap_timeout(clock::INFINITYTime) {}
	
	void set(Time on_time, Time off_time, uint32_t blinks = 1){
		this->on_time = on_time;
 344:	34 e8       	ldi	r19, 0x84	; 132
 346:	39 a3       	std	Y+33, r19	; 0x21
 348:	4e e1       	ldi	r20, 0x1E	; 30
 34a:	4a a3       	std	Y+34, r20	; 0x22
 34c:	1b a2       	std	Y+35, r1	; 0x23
 34e:	1c a2       	std	Y+36, r1	; 0x24
 350:	1d a2       	std	Y+37, r1	; 0x25
 352:	1e a2       	std	Y+38, r1	; 0x26
 354:	1f a2       	std	Y+39, r1	; 0x27
 356:	18 a6       	std	Y+40, r1	; 0x28
 358:	01 c0       	rjmp	.+2      	; 0x35c <main+0x22e>
			if (!do_not_print){ // if this was rather a reset than a print then do not print
				if (blinker.is_finished()){
					blinker.set(clock::ONESecond / 2, clock::ONESecond / 2, counter);
				}
			}
			do_not_print = false;
 35a:	81 2c       	mov	r8, r1
		}
		
		blinker.run(clock::get_time());
 35c:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
 360:	22 2e       	mov	r2, r18
 362:	33 2e       	mov	r3, r19
 364:	44 2e       	mov	r4, r20
 366:	95 2e       	mov	r9, r21
 368:	6a a7       	std	Y+42, r22	; 0x2a
 36a:	b7 2f       	mov	r27, r23
 36c:	f8 2f       	mov	r31, r24
 36e:	e9 2f       	mov	r30, r25
		blinks_left_doubled = 0;
		swap_timeout = clock::INFINITYTime;
	}
	
	void run(Time now){
		if (blinks_left_doubled != 0){
 370:	29 81       	ldd	r18, Y+1	; 0x01
 372:	3a 81       	ldd	r19, Y+2	; 0x02
 374:	4b 81       	ldd	r20, Y+3	; 0x03
 376:	5c 81       	ldd	r21, Y+4	; 0x04
 378:	6d 81       	ldd	r22, Y+5	; 0x05
 37a:	7e 81       	ldd	r23, Y+6	; 0x06
 37c:	8f 81       	ldd	r24, Y+7	; 0x07
 37e:	98 85       	ldd	r25, Y+8	; 0x08
 380:	a0 e0       	ldi	r26, 0x00	; 0
 382:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpdi2_s8>
 386:	09 f4       	brne	.+2      	; 0x38a <main+0x25c>
 388:	1c cf       	rjmp	.-456    	; 0x1c2 <main+0x94>
			if (now > swap_timeout){
 38a:	22 2d       	mov	r18, r2
 38c:	33 2d       	mov	r19, r3
 38e:	44 2d       	mov	r20, r4
 390:	59 2d       	mov	r21, r9
 392:	6a a5       	ldd	r22, Y+42	; 0x2a
 394:	7b 2f       	mov	r23, r27
 396:	8f 2f       	mov	r24, r31
 398:	9e 2f       	mov	r25, r30
 39a:	a9 84       	ldd	r10, Y+9	; 0x09
 39c:	ba 84       	ldd	r11, Y+10	; 0x0a
 39e:	cb 84       	ldd	r12, Y+11	; 0x0b
 3a0:	dc 84       	ldd	r13, Y+12	; 0x0c
 3a2:	ed 84       	ldd	r14, Y+13	; 0x0d
 3a4:	fe 84       	ldd	r15, Y+14	; 0x0e
 3a6:	0f 85       	ldd	r16, Y+15	; 0x0f
 3a8:	18 89       	ldd	r17, Y+16	; 0x10
 3aa:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__cmpdi2>
 3ae:	09 f0       	breq	.+2      	; 0x3b2 <main+0x284>
 3b0:	08 f4       	brcc	.+2      	; 0x3b4 <main+0x286>
 3b2:	07 cf       	rjmp	.-498    	; 0x1c2 <main+0x94>
				if (blinks_left_doubled % 2){
 3b4:	29 81       	ldd	r18, Y+1	; 0x01
 3b6:	21 70       	andi	r18, 0x01	; 1
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	50 e0       	ldi	r21, 0x00	; 0
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	90 e0       	ldi	r25, 0x00	; 0
 3c6:	a0 e0       	ldi	r26, 0x00	; 0
 3c8:	0e 94 79 02 	call	0x4f2	; 0x4f2 <__cmpdi2_s8>
 3cc:	e1 f0       	breq	.+56     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					swap_timeout = now + off_time;
 3ce:	22 2d       	mov	r18, r2
 3d0:	33 2d       	mov	r19, r3
 3d2:	44 2d       	mov	r20, r4
 3d4:	59 2d       	mov	r21, r9
 3d6:	6a a5       	ldd	r22, Y+42	; 0x2a
 3d8:	7b 2f       	mov	r23, r27
 3da:	8f 2f       	mov	r24, r31
 3dc:	9e 2f       	mov	r25, r30
 3de:	a9 8c       	ldd	r10, Y+25	; 0x19
 3e0:	ba 8c       	ldd	r11, Y+26	; 0x1a
 3e2:	cb 8c       	ldd	r12, Y+27	; 0x1b
 3e4:	dc 8c       	ldd	r13, Y+28	; 0x1c
 3e6:	ed 8c       	ldd	r14, Y+29	; 0x1d
 3e8:	fe 8c       	ldd	r15, Y+30	; 0x1e
 3ea:	0f 8d       	ldd	r16, Y+31	; 0x1f
 3ec:	18 a1       	ldd	r17, Y+32	; 0x20
 3ee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__adddi3>
 3f2:	29 87       	std	Y+9, r18	; 0x09
 3f4:	3a 87       	std	Y+10, r19	; 0x0a
 3f6:	4b 87       	std	Y+11, r20	; 0x0b
 3f8:	5c 87       	std	Y+12, r21	; 0x0c
 3fa:	6d 87       	std	Y+13, r22	; 0x0d
 3fc:	7e 87       	std	Y+14, r23	; 0x0e
 3fe:	8f 87       	std	Y+15, r24	; 0x0f
 400:	98 8b       	std	Y+16, r25	; 0x10
	
	uint64_t blinks_left_doubled;
	
	Time swap_timeout;
	
	inline void led_off(){PORTD &= 0b11111110;}
 402:	58 98       	cbi	0x0b, 0	; 11
 404:	1b c0       	rjmp	.+54     	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
			if (now > swap_timeout){
				if (blinks_left_doubled % 2){
					swap_timeout = now + off_time;
					led_off();		
				} else {
					swap_timeout = now + on_time;
 406:	22 2d       	mov	r18, r2
 408:	33 2d       	mov	r19, r3
 40a:	44 2d       	mov	r20, r4
 40c:	59 2d       	mov	r21, r9
 40e:	6a a5       	ldd	r22, Y+42	; 0x2a
 410:	7b 2f       	mov	r23, r27
 412:	8f 2f       	mov	r24, r31
 414:	9e 2f       	mov	r25, r30
 416:	a9 a0       	ldd	r10, Y+33	; 0x21
 418:	ba a0       	ldd	r11, Y+34	; 0x22
 41a:	cb a0       	ldd	r12, Y+35	; 0x23
 41c:	dc a0       	ldd	r13, Y+36	; 0x24
 41e:	ed a0       	ldd	r14, Y+37	; 0x25
 420:	fe a0       	ldd	r15, Y+38	; 0x26
 422:	0f a1       	ldd	r16, Y+39	; 0x27
 424:	18 a5       	ldd	r17, Y+40	; 0x28
 426:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <__adddi3>
 42a:	29 87       	std	Y+9, r18	; 0x09
 42c:	3a 87       	std	Y+10, r19	; 0x0a
 42e:	4b 87       	std	Y+11, r20	; 0x0b
 430:	5c 87       	std	Y+12, r21	; 0x0c
 432:	6d 87       	std	Y+13, r22	; 0x0d
 434:	7e 87       	std	Y+14, r23	; 0x0e
 436:	8f 87       	std	Y+15, r24	; 0x0f
 438:	98 8b       	std	Y+16, r25	; 0x10
	uint64_t blinks_left_doubled;
	
	Time swap_timeout;
	
	inline void led_off(){PORTD &= 0b11111110;}
	inline void led_on(){PORTD |= 0b00000001;}
 43a:	58 9a       	sbi	0x0b, 0	; 11
					led_off();		
				} else {
					swap_timeout = now + on_time;
					led_on();
				}
				--blinks_left_doubled;
 43c:	29 81       	ldd	r18, Y+1	; 0x01
 43e:	3a 81       	ldd	r19, Y+2	; 0x02
 440:	4b 81       	ldd	r20, Y+3	; 0x03
 442:	5c 81       	ldd	r21, Y+4	; 0x04
 444:	6d 81       	ldd	r22, Y+5	; 0x05
 446:	7e 81       	ldd	r23, Y+6	; 0x06
 448:	8f 81       	ldd	r24, Y+7	; 0x07
 44a:	98 85       	ldd	r25, Y+8	; 0x08
 44c:	af ef       	ldi	r26, 0xFF	; 255
 44e:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__adddi3_s8>
 452:	29 83       	std	Y+1, r18	; 0x01
 454:	3a 83       	std	Y+2, r19	; 0x02
 456:	4b 83       	std	Y+3, r20	; 0x03
 458:	5c 83       	std	Y+4, r21	; 0x04
 45a:	6d 83       	std	Y+5, r22	; 0x05
 45c:	7e 83       	std	Y+6, r23	; 0x06
 45e:	8f 83       	std	Y+7, r24	; 0x07
 460:	98 87       	std	Y+8, r25	; 0x08
 462:	af ce       	rjmp	.-674    	; 0x1c2 <main+0x94>
				}
			}
			do_not_print = false;
		}
		
		blinker.run(clock::get_time());
 464:	0e 94 67 00 	call	0xce	; 0xce <_ZN5clock8get_timeEv>
 468:	22 2e       	mov	r2, r18
 46a:	33 2e       	mov	r3, r19
 46c:	44 2e       	mov	r4, r20
 46e:	95 2e       	mov	r9, r21
 470:	6a a7       	std	Y+42, r22	; 0x2a
 472:	b7 2f       	mov	r27, r23
 474:	f8 2f       	mov	r31, r24
 476:	e9 2f       	mov	r30, r25
 478:	88 cf       	rjmp	.-240    	; 0x38a <main+0x25c>
			blinker.set(clock::ONESecond / 10, clock::ONESecond / 10, 20);
			reached_reset = clock::INFINITYTime;
			do_not_print = true;
		}
		
		if ((!p_preller.value())&& p_preller.new_value()){ // print button is released
 47a:	0a a5       	ldd	r16, Y+42	; 0x2a
 47c:	00 23       	and	r16, r16
 47e:	09 f4       	brne	.+2      	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
 480:	2c cf       	rjmp	.-424    	; 0x2da <main+0x1ac>
 482:	6c cf       	rjmp	.-296    	; 0x35c <main+0x22e>

00000484 <__ashldi3>:
 484:	0f 93       	push	r16
 486:	08 30       	cpi	r16, 0x08	; 8
 488:	90 f0       	brcs	.+36     	; 0x4ae <__ashldi3+0x2a>
 48a:	98 2f       	mov	r25, r24
 48c:	87 2f       	mov	r24, r23
 48e:	76 2f       	mov	r23, r22
 490:	65 2f       	mov	r22, r21
 492:	54 2f       	mov	r21, r20
 494:	43 2f       	mov	r20, r19
 496:	32 2f       	mov	r19, r18
 498:	22 27       	eor	r18, r18
 49a:	08 50       	subi	r16, 0x08	; 8
 49c:	f4 cf       	rjmp	.-24     	; 0x486 <__ashldi3+0x2>
 49e:	22 0f       	add	r18, r18
 4a0:	33 1f       	adc	r19, r19
 4a2:	44 1f       	adc	r20, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	66 1f       	adc	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	88 1f       	adc	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 95       	dec	r16
 4b0:	b2 f7       	brpl	.-20     	; 0x49e <__ashldi3+0x1a>
 4b2:	0f 91       	pop	r16
 4b4:	08 95       	ret

000004b6 <__adddi3>:
 4b6:	2a 0d       	add	r18, r10
 4b8:	3b 1d       	adc	r19, r11
 4ba:	4c 1d       	adc	r20, r12
 4bc:	5d 1d       	adc	r21, r13
 4be:	6e 1d       	adc	r22, r14
 4c0:	7f 1d       	adc	r23, r15
 4c2:	80 1f       	adc	r24, r16
 4c4:	91 1f       	adc	r25, r17
 4c6:	08 95       	ret

000004c8 <__adddi3_s8>:
 4c8:	00 24       	eor	r0, r0
 4ca:	a7 fd       	sbrc	r26, 7
 4cc:	00 94       	com	r0
 4ce:	2a 0f       	add	r18, r26
 4d0:	30 1d       	adc	r19, r0
 4d2:	40 1d       	adc	r20, r0
 4d4:	50 1d       	adc	r21, r0
 4d6:	60 1d       	adc	r22, r0
 4d8:	70 1d       	adc	r23, r0
 4da:	80 1d       	adc	r24, r0
 4dc:	90 1d       	adc	r25, r0
 4de:	08 95       	ret

000004e0 <__cmpdi2>:
 4e0:	2a 15       	cp	r18, r10
 4e2:	3b 05       	cpc	r19, r11
 4e4:	4c 05       	cpc	r20, r12
 4e6:	5d 05       	cpc	r21, r13
 4e8:	6e 05       	cpc	r22, r14
 4ea:	7f 05       	cpc	r23, r15
 4ec:	80 07       	cpc	r24, r16
 4ee:	91 07       	cpc	r25, r17
 4f0:	08 95       	ret

000004f2 <__cmpdi2_s8>:
 4f2:	00 24       	eor	r0, r0
 4f4:	a7 fd       	sbrc	r26, 7
 4f6:	00 94       	com	r0
 4f8:	2a 17       	cp	r18, r26
 4fa:	30 05       	cpc	r19, r0
 4fc:	40 05       	cpc	r20, r0
 4fe:	50 05       	cpc	r21, r0
 500:	60 05       	cpc	r22, r0
 502:	70 05       	cpc	r23, r0
 504:	80 05       	cpc	r24, r0
 506:	90 05       	cpc	r25, r0
 508:	08 95       	ret

0000050a <_exit>:
 50a:	f8 94       	cli

0000050c <__stop_program>:
 50c:	ff cf       	rjmp	.-2      	; 0x50c <__stop_program>
